$date
	Sat Jun 25 17:22:16 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module MIPS_tb $end
$var wire 16 ! current_instr [15:0] $end
$var reg 1 " clk $end
$var reg 384 # in_data [383:0] $end
$var reg 384 $ in_instr [383:0] $end
$var reg 32 % in_val [31:0] $end
$var reg 1 & rst $end
$scope module cgcpu $end
$var wire 1 " clk $end
$var wire 384 ' in_data [383:0] $end
$var wire 384 ( in_instr [383:0] $end
$var wire 32 ) in_val [31:0] $end
$var wire 1 & rst $end
$var wire 1 * zero $end
$var wire 3 + writeaddress [2:0] $end
$var wire 16 , reg_write_data [15:0] $end
$var wire 1 - reg_write $end
$var wire 2 . reg_dst [1:0] $end
$var wire 16 / print_rdata2 [15:0] $end
$var wire 16 0 print_rdata1 [15:0] $end
$var wire 16 1 mux6out [15:0] $end
$var wire 1 2 mem_write $end
$var wire 2 3 mem_to_reg [1:0] $end
$var wire 16 4 mem_read_data [15:0] $end
$var wire 1 5 mem_read $end
$var wire 1 6 jump $end
$var wire 16 7 inst_extend [15:0] $end
$var wire 16 8 current_instruction [15:0] $end
$var wire 1 9 branch $end
$var wire 1 : andout $end
$var wire 16 ; aludata2 [15:0] $end
$var wire 1 < alu_src $end
$var wire 2 = alu_op [1:0] $end
$var wire 13 > PC_out4 [12:0] $end
$var wire 13 ? PC_out3 [12:0] $end
$var wire 13 @ PC_out2 [12:0] $end
$var wire 13 A PC_out1 [12:0] $end
$var wire 13 B PC_out [12:0] $end
$var wire 13 C PC_in [12:0] $end
$var wire 1 D JRout $end
$var wire 16 E ALUresult [15:0] $end
$var wire 3 F ALU_Control [2:0] $end
$scope module ALU $end
$var wire 1 * zero $end
$var wire 16 G b [15:0] $end
$var wire 3 H alu_control [2:0] $end
$var wire 16 I a [15:0] $end
$var reg 16 J result [15:0] $end
$upscope $end
$scope module Add1 $end
$var wire 13 K b [12:0] $end
$var wire 13 L result [12:0] $end
$var wire 13 M a [12:0] $end
$upscope $end
$scope module Add2 $end
$var wire 13 N a [12:0] $end
$var wire 13 O b [12:0] $end
$var wire 13 P result [12:0] $end
$upscope $end
$scope module And $end
$var wire 1 : a $end
$var wire 1 * c $end
$var wire 1 9 b $end
$upscope $end
$scope module CONTROL $end
$var wire 3 Q opcode [2:0] $end
$var wire 1 & reset $end
$var reg 2 R aluOp [1:0] $end
$var reg 1 < aluSrc $end
$var reg 1 9 branch $end
$var reg 1 6 jump $end
$var reg 1 5 memRead $end
$var reg 2 S memToReg [1:0] $end
$var reg 1 2 memWrite $end
$var reg 2 T regDst [1:0] $end
$var reg 1 - regWrite $end
$upscope $end
$scope module MUX1 $end
$var wire 3 U in0 [2:0] $end
$var wire 3 V in1 [2:0] $end
$var wire 3 W in2 [2:0] $end
$var wire 2 X sel [1:0] $end
$var reg 3 Y out0 [2:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 1 < sel $end
$var wire 16 Z out0 [15:0] $end
$var wire 16 [ in1 [15:0] $end
$var wire 16 \ in0 [15:0] $end
$upscope $end
$scope module MUX3 $end
$var wire 13 ] in0 [12:0] $end
$var wire 13 ^ in1 [12:0] $end
$var wire 1 : sel $end
$var wire 13 _ out0 [12:0] $end
$upscope $end
$scope module MUX4 $end
$var wire 13 ` in0 [12:0] $end
$var wire 13 a in1 [12:0] $end
$var wire 1 6 sel $end
$var wire 13 b out0 [12:0] $end
$upscope $end
$scope module MUX5 $end
$var wire 13 c in0 [12:0] $end
$var wire 13 d in1 [12:0] $end
$var wire 1 D sel $end
$var wire 13 e out0 [12:0] $end
$upscope $end
$scope module MUX6 $end
$var wire 16 f in0 [15:0] $end
$var wire 16 g in2 [15:0] $end
$var wire 2 h sel [1:0] $end
$var wire 16 i in1 [15:0] $end
$var reg 16 j out0 [15:0] $end
$upscope $end
$scope module MUX7 $end
$var wire 16 k in0 [15:0] $end
$var wire 16 l in1 [15:0] $end
$var wire 1 D sel $end
$var wire 16 m out0 [15:0] $end
$upscope $end
$scope module PC $end
$var wire 13 n PC_in [12:0] $end
$var wire 1 " clk $end
$var wire 1 & rst $end
$var reg 13 o PC_out [12:0] $end
$upscope $end
$scope module aluControl $end
$var wire 2 p ALUop [1:0] $end
$var wire 4 q Function [3:0] $end
$var wire 6 r ALUControlIn [5:0] $end
$var reg 3 s ALU_Control [2:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 " clk $end
$var wire 384 t in_data [383:0] $end
$var wire 16 u mem_access_addr [15:0] $end
$var wire 1 5 mem_read $end
$var wire 1 2 mem_write_en $end
$var wire 1 & rst $end
$var wire 16 v mem_write_data [15:0] $end
$var wire 16 w mem_read_data [15:0] $end
$var wire 5 x mem_addr [4:0] $end
$upscope $end
$scope module instructionMemory $end
$var wire 384 y in_instr [383:0] $end
$var wire 13 z pc [12:0] $end
$var reg 16 { current_instruction [15:0] $end
$upscope $end
$scope module jrControl $end
$var wire 2 | aluOp [1:0] $end
$var wire 4 } function0 [3:0] $end
$var wire 1 D JRControl $end
$upscope $end
$scope module register_file $end
$var wire 1 " clk $end
$var wire 32 ~ in_val [31:0] $end
$var wire 16 !" print_rdata1 [15:0] $end
$var wire 16 "" print_rdata2 [15:0] $end
$var wire 3 #" readaddress1 [2:0] $end
$var wire 3 $" readaddress2 [2:0] $end
$var wire 1 - regwrite $end
$var wire 1 & rst $end
$var wire 16 %" write_data [15:0] $end
$var wire 3 &" writeaddress [2:0] $end
$var integer 32 '" i [31:0] $end
$upscope $end
$scope module signExtend $end
$var wire 7 (" in1 [6:0] $end
$var wire 16 )" out1 [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 )"
b0 ("
bx '"
b0 &"
bx %"
b0 $"
b0 #"
bx ""
bx !"
b0 ~
b0 }
b0 |
b0 {
bx z
b100110010000000110011001100000100000100111000000000010011001010011000100000000100000100111000010010000000000100000001001110000010000100111000011011000000000110111110010000000101011101000000011010000000000111100001001110001100001110000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 y
bx x
b0 w
bx v
bx u
b1000110000000000001001000000000011000100000000110010010000000000111100000000001101101100000000000001111110000100101000010100111100010110010111100010011101001111011111101110011001000100000100011001010001110001010110000100101110010001101000001110011111100000101011001111010111100110110000011100010010000111100110110100001100101001110111000011101111110110111001 t
b0 s
b0 r
b0 q
b0 p
bx o
bx n
bx m
b101 l
bx k
bx j
b0 i
b0 h
b0xxxxxxxxxxxxx g
bx f
bx e
bx d
bx c
bx b
b0 a
bx `
bx _
bx ^
bx ]
bx \
b0 [
bx Z
b0 Y
b0 X
b111 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
bx P
b0 O
bx N
bx M
bx L
b1 K
bx J
bx I
b0 H
bx G
b0 F
bx E
0D
bx C
bx B
bx A
bx @
bx ?
bx >
b0 =
0<
bx ;
0:
09
b0 8
b0 7
06
05
b0 4
b0 3
02
bx 1
bx 0
bx /
b0 .
0-
bx ,
b0 +
x*
b0 )
b100110010000000110011001100000100000100111000000000010011001010011000100000000100000100111000010010000000000100000001001110000010000100111000011011000000000110111110010000000101011101000000011010000000000111100001001110001100001110000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (
b1000110000000000001001000000000011000100000000110010010000000000111100000000001101101100000000000001111110000100101000010100111100010110010111100010011101001111011111101110011001000100000100011001010001110001010110000100101110010001101000001110011111100000101011001111010111100110110000011100010010000111100110110100001100101001110111000011101111110110111001 '
0&
b0 %
b100110010000000110011001100000100000100111000000000010011001010011000100000000100000100111000010010000000000100000001001110000010000100111000011011000000000110111110010000000101011101000000011010000000000111100001001110001100001110000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 $
b1000110000000000001001000000000011000100000000110010010000000000111100000000001101101100000000000001111110000100101000010100111100010110010111100010011101001111011111101110011001000100000100011001010001110001010110000100101110010001101000001110011111100000101011001111010111100110110000011100010010000111100110110100001100101001110111000011101111110110111001 #
0"
b0 !
$end
#500
b1 C
b1 e
b1 n
b10 +
b10 Y
b10 &"
b1 F
b1 H
b1 s
b1 O
b1 >
b1 b
b1 c
b0 ,
b0 m
b0 %"
b1100100000001 a
b10 U
b1 }
b1 r
b1 q
b1 7
b1 [
b1 )"
b1 ("
b100 Q
b10 $"
b110 #"
1*
b0 x
b1 ?
b1 _
b1 `
b0 1
b0 j
b0 k
b1001100100000001 !
b1001100100000001 8
b1001100100000001 {
b0 d
b0 E
b0 J
b0 f
b0 u
b0 ;
b0 G
b0 Z
b10 @
b10 P
b10 ^
b1 g
b1 A
b1 L
b1 N
b1 ]
b0 B
b0 M
b0 o
b0 z
b1000 '"
b0 0
b0 I
b0 !"
b0 /
b0 \
b0 v
b0 ""
1"
#1000
0"
#1500
b1000 '"
1"
#2000
b100011 ,
b100011 m
b100011 %"
b100011 1
b100011 j
b100011 k
b100011 4
b100011 i
b100011 w
0*
b1 x
b1 E
b1 J
b1 f
b1 u
b0 F
b0 H
b0 s
b1 ;
b1 G
b1 Z
b110001 r
b11 =
b11 R
b11 p
b11 |
15
1-
b1 3
b1 S
b1 h
1<
0"
1&
#2500
b1001 ,
b1001 m
b1001 %"
b1001 1
b1001 j
b1001 k
b1001 4
b1001 i
b1001 w
b10 x
b10 E
b10 J
b10 f
b10 u
b10 C
b10 e
b10 n
b11 +
b11 Y
b11 &"
b10 ;
b10 G
b10 Z
b10 O
b10 >
b10 b
b10 c
b1100110000010 a
b11 U
b10 }
b110010 r
b10 q
b10 7
b10 [
b10 )"
b10 ("
b11 $"
b10 ?
b10 _
b10 `
b1001100110000010 !
b1001100110000010 8
b1001100110000010 {
b100 @
b100 P
b100 ^
b10 g
b10 A
b10 L
b10 N
b10 ]
b1 B
b1 M
b1 o
b1 z
b0 /
b0 \
b0 v
b0 ""
1"
#3000
0"
#3500
b101100 ,
b101100 m
b101100 %"
b0 4
b0 i
b0 w
b101100 1
b101100 j
b101100 k
b1100 x
b11 C
b11 e
b11 n
b100 +
b100 Y
b100 &"
b1001 ;
b1001 G
b1001 Z
b1000000 O
b0 =
b0 R
b0 p
b0 |
05
b0 3
b0 S
b0 h
0<
b1 .
b1 T
b1 X
b100011 d
b101100 E
b101100 J
b101100 f
b101100 u
b11 >
b11 b
b11 c
b100111000000 a
b100 V
b0 }
b0 r
b0 q
b1000000 7
b1000000 [
b1000000 )"
b1000000 ("
b0 Q
b100011 0
b100011 I
b100011 !"
b10 #"
b11 ?
b11 _
b11 `
b100111000000 !
b100111000000 8
b100111000000 {
b1001 /
b1001 \
b1001 v
b1001 ""
b1000011 @
b1000011 P
b1000011 ^
b11 g
b11 A
b11 L
b11 N
b11 ]
b10 B
b10 M
b10 o
b10 z
1"
#4000
0"
#4500
b0 ,
b0 m
b0 %"
1*
b0 1
b0 j
b0 k
b0 x
b0 E
b0 J
b0 f
b0 u
b100 C
b100 e
b100 n
b1 +
b1 Y
b1 &"
b100 F
b100 H
b100 s
b10100 O
b100 >
b100 b
b100 c
b100110010100 a
b1 V
b100 }
b100 r
b100 q
b10100 7
b10100 [
b10100 )"
b10100 ("
b100 ?
b100 _
b100 `
b100110010100 !
b100110010100 8
b100110010100 {
b11000 @
b11000 P
b11000 ^
b100 g
b100 A
b100 L
b100 N
b100 ]
b11 B
b11 M
b11 o
b11 z
1"
#5000
0"
#5500
1:
b0 ,
b0 m
b0 %"
1*
b0 1
b0 j
b0 k
b0 x
b111 C
b111 e
b111 n
b0 +
b0 Y
b0 &"
b1 F
b1 H
b1 s
b10 O
b1 =
b1 R
b1 p
b1 |
19
0-
b0 .
b0 T
b0 X
b0 ;
b0 G
b0 Z
b0 d
b0 E
b0 J
b0 f
b0 u
b111 >
b111 b
b111 c
b10000000010 a
b0 V
b0 U
b10 }
b10010 r
b10 q
b10 7
b10 [
b10 )"
b10 ("
b110 Q
b0 /
b0 \
b0 v
b0 ""
b0 $"
b0 0
b0 I
b0 !"
b1 #"
b111 ?
b111 _
b111 `
b1100010000000010 !
b1100010000000010 8
b1100010000000010 {
b111 @
b111 P
b111 ^
b101 g
b101 A
b101 L
b101 N
b101 ]
b100 B
b100 M
b100 o
b100 z
1"
#6000
0"
#6500
b11010 ,
b11010 m
b11010 %"
0:
0*
b11010 1
b11010 j
b11010 k
b11010 x
b1000 C
b1000 e
b1000 n
b100 +
b100 Y
b100 &"
b1000001 O
b0 =
b0 R
b0 p
b0 |
09
1-
b1 .
b1 T
b1 X
b1001 ;
b1001 G
b1001 Z
b100011 d
b11010 E
b11010 J
b11010 f
b11010 u
b1000 >
b1000 b
b1000 c
b100111000001 a
b100 V
b11 U
b1 }
b1 r
b1 q
b1000001 7
b1000001 [
b1000001 )"
b1000001 ("
b0 Q
b1001 /
b1001 \
b1001 v
b1001 ""
b11 $"
b100011 0
b100011 I
b100011 !"
b10 #"
b1000 ?
b1000 _
b1000 `
b100111000001 !
b100111000001 8
b100111000001 {
b1001001 @
b1001001 P
b1001001 ^
b1000 g
b1000 A
b1000 L
b1000 N
b1000 ]
b111 B
b111 M
b111 o
b111 z
1"
#7000
0"
#7500
b101011 ,
b101011 m
b101011 %"
b101011 1
b101011 j
b101011 k
b1011 x
b101011 E
b101011 J
b101011 f
b101011 u
b1001 C
b1001 e
b1001 n
b11 F
b11 H
b11 s
b1000011 O
b1001 >
b1001 b
b1001 c
b100111000011 a
b11 }
b11 r
b11 q
b1000011 7
b1000011 [
b1000011 )"
b1000011 ("
b1001 ?
b1001 _
b1001 `
b100111000011 !
b100111000011 8
b100111000011 {
b1001100 @
b1001100 P
b1001100 ^
b1001 g
b1001 A
b1001 L
b1001 N
b1001 ]
b1000 B
b1000 M
b1000 o
b1000 z
1"
#8000
0"
#8500
1*
b1010 ,
b1010 m
b1010 %"
b1010 1
b1010 j
b1010 k
b0 x
b1101 C
b1101 e
b1101 n
b111 +
b111 Y
b111 &"
b1101 O
16
b10 3
b10 S
b10 h
b10 .
b10 T
b10 X
b0 ;
b0 G
b0 Z
b0 d
b0 E
b0 J
b0 f
b0 u
b1101 >
b1101 b
b1101 c
b1101 a
b0 V
b0 U
b1101 }
b1101 r
b1101 q
b1101 7
b1101 [
b1101 )"
b1101 ("
b11 Q
b0 /
b0 \
b0 v
b0 ""
b0 $"
b0 0
b0 I
b0 !"
b0 #"
b1010 ?
b1010 _
b1010 `
b110000000001101 !
b110000000001101 8
b110000000001101 {
b10111 @
b10111 P
b10111 ^
b1010 g
b1010 A
b1010 L
b1010 N
b1010 ]
b1001 B
b1001 M
b1001 o
b1001 z
1"
#9000
0"
#9500
b1110 C
b1110 e
b1110 n
0*
b11 x
b1110 >
b1110 b
b1110 c
b100 +
b100 Y
b100 &"
b110 F
b110 H
b110 s
b1000110 O
06
b0 3
b0 S
b0 h
b1 .
b1 T
b1 X
b1001 ;
b1001 G
b1001 Z
b100011 d
b11 E
b11 J
b11 f
b11 u
b11 ,
b11 m
b11 %"
b100111000110 a
b100 V
b11 U
b110 }
b110 r
b110 q
b1000110 7
b1000110 [
b1000110 )"
b1000110 ("
b0 Q
b1001 /
b1001 \
b1001 v
b1001 ""
b11 $"
b100011 0
b100011 I
b100011 !"
b10 #"
b1110 ?
b1110 _
b1110 `
b11 1
b11 j
b11 k
b100111000110 !
b100111000110 8
b100111000110 {
b1010100 @
b1010100 P
b1010100 ^
b1110 g
b1110 A
b1110 L
b1110 N
b1110 ]
b1101 B
b1101 M
b1101 o
b1101 z
1"
#10000
0"
#10500
x*
b101 ,
b101 m
b101 %"
bx 1
bx j
bx k
bx x
b1010 C
b1010 e
b1010 n
b0 +
b0 Y
b0 &"
1D
b1000 O
b0 ;
b0 G
b0 Z
b1010 d
bx E
bx J
bx f
bx u
b1111 >
b1111 b
b1111 c
b1110000001000 a
b0 V
b0 U
b1000 }
b1000 r
b1000 q
b1000 7
b1000 [
b1000 )"
b1000 ("
b0 /
b0 \
b0 v
b0 ""
b0 $"
b1010 0
b1010 I
b1010 !"
b111 #"
b1111 ?
b1111 _
b1111 `
b1110000001000 !
b1110000001000 8
b1110000001000 {
b10111 @
b10111 P
b10111 ^
b1111 g
b1111 A
b1111 L
b1111 N
b1111 ]
b1110 B
b1110 M
b1110 o
b1110 z
1"
#11000
0"
#11500
b101 ,
b101 m
b101 %"
b1011 C
b1011 e
b1011 n
0*
b101 1
b101 j
b101 k
b101 x
b100 +
b100 Y
b100 &"
0D
b0 F
b0 H
b0 s
b10 O
b11 =
b11 R
b11 p
b11 |
1<
b0 .
b0 T
b0 X
b11 d
b101 E
b101 J
b101 f
b101 u
b1011 >
b1011 b
b1011 c
b1001000000010 a
b100 U
b10 }
b110010 r
b10 q
b10 7
b10 [
b10 )"
b10 ("
b111 Q
b100 $"
b11 0
b11 I
b11 !"
b100 #"
b10 ;
b10 G
b10 Z
b1011 ?
b1011 _
b1011 `
b1111001000000010 !
b1111001000000010 8
b1111001000000010 {
b11 /
b11 \
b11 v
b11 ""
b1101 @
b1101 P
b1101 ^
b1011 g
b1011 A
b1011 L
b1011 N
b1011 ]
b1010 B
b1010 M
b1010 o
b1010 z
1"
#12000
0"
#12500
b1100 C
b1100 e
b1100 n
b11 ;
b11 G
b11 Z
b11 O
12
0-
b1100 >
b1100 b
b1100 c
b11 ,
b11 m
b11 %"
b1101000000011 a
b11 }
b110011 r
b11 q
b11 7
b11 [
b11 )"
b11 ("
b101 Q
b110 #"
b11 x
b1100 ?
b1100 _
b1100 `
b11 1
b11 j
b11 k
b1011101000000011 !
b1011101000000011 8
b1011101000000011 {
b0 d
b11 E
b11 J
b11 f
b11 u
b1111 @
b1111 P
b1111 ^
b1100 g
b1100 A
b1100 L
b1100 N
b1100 ]
b1011 B
b1011 M
b1011 o
b1011 z
b0 0
b0 I
b0 !"
b101 /
b101 \
b101 v
b101 ""
1"
#13000
0"
#13500
b0 ,
b0 m
b0 %"
1*
b0 1
b0 j
b0 k
b0 x
b0 E
b0 J
b0 f
b0 u
b1111 C
b1111 e
b1111 n
b0 +
b0 Y
b0 &"
b0 ;
b0 G
b0 Z
b1111 O
16
b0 =
b0 R
b0 p
b0 |
02
0<
b1111 >
b1111 b
b1111 c
b1111 a
b0 U
b1111 }
b1111 r
b1111 q
b1111 7
b1111 [
b1111 )"
b1111 ("
b10 Q
b0 /
b0 \
b0 v
b0 ""
b0 $"
b0 #"
b1101 ?
b1101 _
b1101 `
b100000000001111 !
b100000000001111 8
b100000000001111 {
b11100 @
b11100 P
b11100 ^
b1101 g
b1101 A
b1101 L
b1101 N
b1101 ]
b1100 B
b1100 M
b1100 o
b1100 z
1"
#14000
0"
#14500
b10000 C
b10000 e
b10000 n
b10000 >
b10000 b
b10000 c
b0 O
06
1-
b1 .
b1 T
b1 X
b0 a
b0 }
b0 r
b0 q
b0 7
b0 [
b0 )"
b0 ("
b0 Q
b10000 ?
b10000 _
b10000 `
b0 !
b0 8
b0 {
b10000 @
b10000 P
b10000 ^
b10000 g
b10000 A
b10000 L
b10000 N
b10000 ]
b1111 B
b1111 M
b1111 o
b1111 z
1"
#15000
0"
#15500
b10001 C
b10001 e
b10001 n
b10001 >
b10001 b
b10001 c
b10001 ?
b10001 _
b10001 `
b10001 @
b10001 P
b10001 ^
b10001 g
b10001 A
b10001 L
b10001 N
b10001 ]
b10000 B
b10000 M
b10000 o
b10000 z
1"
#16000
0"
#16500
b10010 C
b10010 e
b10010 n
b10010 >
b10010 b
b10010 c
b10010 ?
b10010 _
b10010 `
b10010 @
b10010 P
b10010 ^
b10010 g
b10010 A
b10010 L
b10010 N
b10010 ]
b10001 B
b10001 M
b10001 o
b10001 z
1"
#17000
0"
#17500
b10011 C
b10011 e
b10011 n
b10011 >
b10011 b
b10011 c
b10011 ?
b10011 _
b10011 `
b10011 @
b10011 P
b10011 ^
b10011 g
b10011 A
b10011 L
b10011 N
b10011 ]
b10010 B
b10010 M
b10010 o
b10010 z
1"
#18000
0"
#18500
b10100 C
b10100 e
b10100 n
b10100 >
b10100 b
b10100 c
b10100 ?
b10100 _
b10100 `
b10100 @
b10100 P
b10100 ^
b10100 g
b10100 A
b10100 L
b10100 N
b10100 ]
b10011 B
b10011 M
b10011 o
b10011 z
1"
#19000
0"
#19500
b10101 C
b10101 e
b10101 n
b10101 >
b10101 b
b10101 c
b10101 ?
b10101 _
b10101 `
b10101 @
b10101 P
b10101 ^
b10101 g
b10101 A
b10101 L
b10101 N
b10101 ]
b10100 B
b10100 M
b10100 o
b10100 z
1"
#20000
0"
